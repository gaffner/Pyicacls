import unittest
import mock
from impacket.smb3structs import FileSecInformation

from pyicacls.setter import PermissionsSetter


class TestPermissionsSetter( unittest.TestCase ):
    # TODO: inherit from base test class
    @staticmethod
    def get_permissions_setter() -> PermissionsSetter:
        with mock.patch( 'pyicacls.permissions.SMBConnection' ):
            return PermissionsSetter(
                ip=mock.Mock, remote_name=mock.Mock, username=mock.Mock, password=mock.Mock, domain=mock.Mock
            )

    @staticmethod
    def generic_permissions_set_check(username, permissions, username_as_sid_bytes, sec):
        permissions_setter = TestPermissionsSetter.get_permissions_setter()
        with mock.patch( 'pyicacls.setter.PermissionsSetter.name_to_sid',
                         lambda *args, **kwargs: username_as_sid_bytes ):
            permission = permissions_setter.permissions_to_ace( username, permissions )

        return permissions_setter.insert_permission( sec=sec, permission=permission )

    def test_add_permission_new(self):
        expected_security_descriptor = b'\x01\x00\x04\x84\x14\x00\x00\x000\x00\x00\x00\x00\x00\x00\x00L\x00\x00\x00' \
                                       b'\x01\x05\x00\x00\x00\x00\x00\x05\x15\x00\x00\x00\xb3n\xbe\xf9H\x85\x8a"G\xea' \
                                       b'\t\x80\xe9\x03\x00\x00\x01\x05\x00\x00\x00\x00\x00\x05\x15\x00\x00\x00\xb3n' \
                                       b'\xbe\xf9H\x85\x8a"G\xea\t\x80\x01\x02\x00\x00\x02\x00\x90\x00\x05\x00\x00' \
                                       b'\x00\x00\x00$\x00\x9f\x01\x12\x00\x01\x05\x00\x00\x00\x00\x00\x05\x15\x00' \
                                       b'\x00\x00\xb3n\xbe\xf9H\x85\x8a"G\xea\t\x80\xf4\x01\x00\x00\x00\x10$\x00\xff' \
                                       b'\x01\x1f\x00\x01\x05\x00\x00\x00\x00\x00\x05\x15\x00\x00\x00\xb3n\xbe\xf9H' \
                                       b'\x85\x8a"G\xea\t\x80\xe9\x03\x00\x00\x00\x10\x14\x00\xff\x01\x1f\x00\x01\x01' \
                                       b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x10\x18\x00\xff\x01\x1f\x00\x01' \
                                       b'\x02\x00\x00\x00\x00\x00\x05 \x00\x00\x00 ' \
                                       b'\x02\x00\x00\x00\x10\x14\x00\xff\x01\x1f\x00\x01\x01\x00\x00\x00\x00\x00\x05' \
                                       b'\x12\x00\x00\x00'

        username_as_sid_bytes = b'\x01\x05\x00\x00\x00\x00\x00\x05\x15\x00\x00\x00\xb3n\xbe\xf9H\x85\x8a"G\xea\t\x80' \
                                b'\xf4\x01\x00\x00'
        username, permissions = 'Administrator', 'R,W'
        sec = FileSecInformation(b'\x01\x00\x04\x84\x14\x00\x00\x000\x00\x00\x00\x00\x00\x00\x00L\x00\x00\x00\x01\x05'
                                 b'\x00\x00\x00\x00\x00\x05\x15\x00\x00\x00\xb3n\xbe\xf9H\x85\x8a"G\xea\t\x80\xe9\x03'
                                 b'\x00\x00\x01\x05\x00\x00\x00\x00\x00\x05\x15\x00\x00\x00\xb3n\xbe\xf9H\x85\x8a"G'
                                 b'\xea\t\x80\x01\x02\x00\x00\x02\x00l\x00\x04\x00\x00\x00\x00\x10$\x00\xff\x01\x1f'
                                 b'\x00\x01\x05\x00\x00\x00\x00\x00\x05\x15\x00\x00\x00\xb3n\xbe\xf9H\x85\x8a"G\xea\t'
                                 b'\x80\xe9\x03\x00\x00\x00\x10\x14\x00\xff\x01\x1f\x00\x01\x01\x00\x00\x00\x00\x00'
                                 b'\x01\x00\x00\x00\x00\x00\x10\x18\x00\xff\x01\x1f\x00\x01\x02\x00\x00\x00\x00\x00'
                                 b'\x05 \x00\x00\x00 '
                                 b'\x02\x00\x00\x00\x10\x14\x00\xff\x01\x1f\x00\x01\x01\x00\x00\x00\x00\x00\x05\x12'
                                 b'\x00\x00\x00')

        security_descriptor = TestPermissionsSetter.generic_permissions_set_check(username, permissions,
                                                                                  username_as_sid_bytes, sec)
        self.assertEqual( security_descriptor, expected_security_descriptor )

    def test_add_permission_exists(self):
        expected_security_descriptor = b'\x01\x00\x04\x84\x14\x00\x00\x000\x00\x00\x00\x00\x00\x00\x00L\x00\x00\x00' \
                                       b'\x01\x05\x00\x00\x00\x00\x00\x05\x15\x00\x00\x00\xb3n\xbe\xf9H\x85\x8a"G\xea' \
                                       b'\t\x80\xe9\x03\x00\x00\x01\x05\x00\x00\x00\x00\x00\x05\x15\x00\x00\x00\xb3n' \
                                       b'\xbe\xf9H\x85\x8a"G\xea\t\x80\x01\x02\x00\x00\x02\x00\x90\x00\x04\x00\x00' \
                                       b'\x00\x00\x00$\x00\xbf\x01\x13\x00\x01\x05\x00\x00\x00\x00\x00\x05\x15\x00' \
                                       b'\x00\x00\xb3n\xbe\xf9H\x85\x8a"G\xea\t\x80\xf4\x01\x00\x00\x00\x10$\x00\xff' \
                                       b'\x01\x1f\x00\x01\x05\x00\x00\x00\x00\x00\x05\x15\x00\x00\x00\xb3n\xbe\xf9H' \
                                       b'\x85\x8a"G\xea\t\x80\xe9\x03\x00\x00\x00\x10\x14\x00\xff\x01\x1f\x00\x01\x01' \
                                       b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x10\x18\x00\xff\x01\x1f\x00\x01' \
                                       b'\x02\x00\x00\x00\x00\x00\x05 \x00\x00\x00 ' \
                                       b'\x02\x00\x00\x00\x10\x14\x00\xff\x01\x1f\x00\x01\x01\x00\x00\x00\x00\x00\x05' \
                                       b'\x12\x00\x00\x00'

        username_as_sid_bytes = b'\x01\x05\x00\x00\x00\x00\x00\x05\x15\x00\x00\x00\xb3n\xbe\xf9H\x85\x8a"G\xea\t\x80' \
                                b'\xf4\x01\x00\x00'
        username, permissions = 'Administrator', 'X,D'
        sec = FileSecInformation(b'\x01\x00\x04\x84\x14\x00\x00\x000\x00\x00\x00\x00\x00\x00\x00L\x00\x00\x00\x01\x05'
                                 b'\x00\x00\x00\x00\x00\x05\x15\x00\x00\x00\xb3n\xbe\xf9H\x85\x8a"G\xea\t\x80\xe9\x03'
                                 b'\x00\x00\x01\x05\x00\x00\x00\x00\x00\x05\x15\x00\x00\x00\xb3n\xbe\xf9H\x85\x8a"G'
                                 b'\xea\t\x80\x01\x02\x00\x00\x02\x00\x90\x00\x05\x00\x00\x00\x00\x00$\x00\x9f\x01'
                                 b'\x12\x00\x01\x05\x00\x00\x00\x00\x00\x05\x15\x00\x00\x00\xb3n\xbe\xf9H\x85\x8a"G'
                                 b'\xea\t\x80\xf4\x01\x00\x00\x00\x10$\x00\xff\x01\x1f\x00\x01\x05\x00\x00\x00\x00'
                                 b'\x00\x05\x15\x00\x00\x00\xb3n\xbe\xf9H\x85\x8a"G\xea\t\x80\xe9\x03\x00\x00\x00\x10'
                                 b'\x14\x00\xff\x01\x1f\x00\x01\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x10'
                                 b'\x18\x00\xff\x01\x1f\x00\x01\x02\x00\x00\x00\x00\x00\x05 \x00\x00\x00 '
                                 b'\x02\x00\x00\x00\x10\x14\x00\xff\x01\x1f\x00\x01\x01\x00\x00\x00\x00\x00\x05\x12'
                                 b'\x00\x00\x00')

        security_descriptor = TestPermissionsSetter.generic_permissions_set_check( username, permissions,
                                                                                   username_as_sid_bytes, sec )
        self.assertEqual( security_descriptor, expected_security_descriptor )

    def test_remove_permission(self):
        expected_security_descriptor = b'\x01\x00\x04\x80\x14\x00\x00\x000\x00\x00\x00\x00\x00\x00\x00L\x00\x00\x00' \
                                       b'\x01\x05\x00\x00\x00\x00\x00\x05\x15\x00\x00\x00\xb3n\xbe\xf9H\x85\x8a"G\xea' \
                                       b'\t\x80\xe9\x03\x00\x00\x01\x05\x00\x00\x00\x00\x00\x05\x15\x00\x00\x00\xb3n' \
                                       b'\xbe\xf9H\x85\x8a"G\xea\t\x80\x01\x02\x00\x00\x02\x00l\x00\x04\x00\x00\x00' \
                                       b'\x00\x10$\x00\xff\x01\x1f\x00\x01\x05\x00\x00\x00\x00\x00\x05\x15\x00\x00' \
                                       b'\x00\xb3n\xbe\xf9H\x85\x8a"G\xea\t\x80\xe9\x03\x00\x00\x00\x10\x14\x00\xff' \
                                       b'\x01\x1f\x00\x01\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x10\x18\x00' \
                                       b'\xff\x01\x1f\x00\x01\x02\x00\x00\x00\x00\x00\x05 \x00\x00\x00 ' \
                                       b'\x02\x00\x00\x00\x10\x14\x00\xff\x01\x1f\x00\x01\x01\x00\x00\x00\x00\x00\x05' \
                                       b'\x12\x00\x00\x00'

        username_as_sid_bytes = b'\x01\x05\x00\x00\x00\x00\x00\x05\x15\x00\x00\x00\xb3n\xbe\xf9H\x85\x8a"G\xea\t\x80' \
                                b'\xf4\x01\x00\x00'
        username, permissions = 'Administrator', None
        sec = FileSecInformation(b'\x01\x00\x04\x80\x14\x00\x00\x000\x00\x00\x00\x00\x00\x00\x00L\x00\x00\x00\x01\x05'
                                 b'\x00\x00\x00\x00\x00\x05\x15\x00\x00\x00\xb3n\xbe\xf9H\x85\x8a"G\xea\t\x80\xe9\x03'
                                 b'\x00\x00\x01\x05\x00\x00\x00\x00\x00\x05\x15\x00\x00\x00\xb3n\xbe\xf9H\x85\x8a"G'
                                 b'\xea\t\x80\x01\x02\x00\x00\x02\x00\x90\x00\x05\x00\x00\x00\x00\x00$\x00\x9f\x01'
                                 b'\x12\x00\x01\x05\x00\x00\x00\x00\x00\x05\x15\x00\x00\x00\xb3n\xbe\xf9H\x85\x8a"G'
                                 b'\xea\t\x80\xf4\x01\x00\x00\x00\x10$\x00\xff\x01\x1f\x00\x01\x05\x00\x00\x00\x00'
                                 b'\x00\x05\x15\x00\x00\x00\xb3n\xbe\xf9H\x85\x8a"G\xea\t\x80\xe9\x03\x00\x00\x00\x10'
                                 b'\x14\x00\xff\x01\x1f\x00\x01\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x10'
                                 b'\x18\x00\xff\x01\x1f\x00\x01\x02\x00\x00\x00\x00\x00\x05 \x00\x00\x00 '
                                 b'\x02\x00\x00\x00\x10\x14\x00\xff\x01\x1f\x00\x01\x01\x00\x00\x00\x00\x00\x05\x12'
                                 b'\x00\x00\x00')

        security_descriptor = TestPermissionsSetter.generic_permissions_set_check(username, permissions,
                                                                                  username_as_sid_bytes, sec)
        self.assertEqual( security_descriptor, expected_security_descriptor )
